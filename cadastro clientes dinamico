#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Estrutura para armazenar dados do cliente
struct Cliente {
    char nome[100];
    char email[100];
};

int main() {
    int capacidade = 2; // Capacidade inicial para 2 clientes
    int n = 0;          // Número de clientes cadastrados
    struct Cliente* clientes = (struct Cliente*)malloc(capacidade * sizeof(struct Cliente));

    // Verificar se a alocação inicial foi bem-sucedida
    if (clientes == NULL) {
        printf("Erro ao alocar memória!\n");
        return 1; // Encerra o programa se falhar na alocação
    }

    char continuar;
    do {
        // Pedir dados para um novo cliente
        printf("\nCadastro do cliente %d:\n", n + 1);
        printf("Nome: ");
        getchar(); // Limpar o buffer do teclado
        fgets(clientes[n].nome, sizeof(clientes[n].nome), stdin);
        clientes[n].nome[strcspn(clientes[n].nome, "\n")] = 0; // Remover a nova linha

        printf("E-mail: ");
        fgets(clientes[n].email, sizeof(clientes[n].email), stdin);
        clientes[n].email[strcspn(clientes[n].email, "\n")] = 0; // Remover a nova linha

        // Incrementar o número de clientes cadastrados
        n++;

        // Verificar se a capacidade foi alcançada e realocar memória, se necessário
        if (n == capacidade) {
            capacidade *= 2; // Dobra a capacidade
            clientes = (struct Cliente*)realloc(clientes, capacidade * sizeof(struct Cliente));

            // Verificar se a realocação foi bem-sucedida
            if (clientes == NULL) {
                printf("Erro ao realocar memória!\n");
                return 1; // Encerra o programa em caso de falha
            }
        }

        // Perguntar se o usuário quer continuar cadastrando
        printf("\nDeseja cadastrar outro cliente? (s/n): ");
        scanf(" %c", &continuar); // O espaço antes do %c é para consumir o caractere de nova linha remanescente
    } while (continuar == 's' || continuar == 'S');

    // Exibir os dados dos clientes cadastrados
    printf("\nClientes cadastrados:\n");
    for (int i = 0; i < n; i++) {
        printf("\nCliente %d:\n", i + 1);
        printf("Nome: %s\n", clientes[i].nome);
        printf("E-mail: %s\n", clientes[i].email);
    }

    // Liberar a memória alocada
    free(clientes);

    return 0;
}
